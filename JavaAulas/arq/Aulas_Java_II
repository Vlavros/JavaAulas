------------------------------------------------------------------------------------------------------------------------
*** Aula 01 - 30/11/2018 - Sexta-feira

Professor: Alexandre Zanatta Vieira
Turma: 10923

Instalar bracketeer / EGit / windowbuilder

< > = Operador diamante

for (Integer i : lista) { //for iterator

Box e Unbox -> Java faz automaticamente : auto-boxing e auto-unboxing

Há linguagens que o box e unbox dos tipos primitivos não é feito automaticamente

Classe wrapper

LinkedList x ArrayList - Questão de velocidade
Linked -> Mais para consulta - ao inserir demora mais, pois salva em lugares especificos
Array -> Mais para inserção - salva em qualquer lugar da memoria, por isso salva mais rapido

.clear() -> limpar memória

First Child / Last Child

Collections.sort(a); x Arrays.sort(a);

Hash -> Nâo repete elementos

Mapas -> Listas com chave e valor

------------------------------------------------------------------------------------------------------------------------
*** Estudo 02/12/2018

-- https://dzone.com/articles/arraylist-vs-linkedlist-vs
Aparentemente � ao contr�rio do que foi visto em aula, Linked � melhor em adicionar elementos e Array para get

-- XML:
https://xmlwriter.net/xml_guide/xml_declaration.shtml
https://docs.microsoft.com/pt-br/previous-versions/ms256048(v=vs.110)
https://www.w3schools.com/xml/xml_dtd_intro.asp
http://www.c4learn.com/xml/xml-documents-structure/
https://spin.atomicobject.com/2010/09/01/working-with-embedded-cdata-in-xml-documents/
http://www.tizag.com/xmlTutorial/xmlprolog.php

------------------------------------------------------------------------------------------------------------------------
*** Aula 02 - 03/12/2018 - Segunda-feira

-- Revisão Java Básico

-- Herança x Polimorfismo

Coerção (Type cast): Mudança de um tipo de variável para outro Ex.: float to int
Promoção: Elevar o tipo de variável, não precisa do cast. Ex.: int to float

- Boxing e Unboxing
int (tipo primitivo) -> Integer (classe empacotadora)
Integer i = new Integer(10) -> Boxing da classe primitiva
int b = i,getInt() -> Unboxing
Integer i =10 -> Auto boxing

- Herança
superclasse (classe pai) / subclasse (classe filho)
super.metodo()
extends -> herança declarada
Java não permite herança multiplas
super() -> para acessar a classe pai com this - usar no construtor

memórias: heap /stack
https://pt.stackoverflow.com/questions/3797/o-que-s%C3%A3o-e-onde-est%C3%A3o-o-stack-e-heap

linguagem progress

private e ecapsulamente serve para proteger o programador dele mesmo
private x protected

- Classes abstratas

-- Tarefa de casa: Classe abstrata Mensagem / Classe Filha MensagemVoz / Classe Filha MensagemTexto / Classe Filha MensagemVideo
- Instanciar 3 objetos / Quando chamar o envia objeto mostrar a mensagem correspondente
- 4 classes
1 classe abstrata
1 metodo generico envia mensagem
classes filhas implementar o metodo envia mensagem
Emissor, destinatario, titulo

metodo concreto x metodo abstrato

------------------------------------------------------------------------------------------------------------------------
*** Aula 03 - 04/12/2018 - Terça-feira

Openstack
eof -> end of file
MVC: Model / View / COntrol
MVVM: Padrão android

facade: Mascara a entrada de dados para o model ou a existencia do banco para a view

-- Design Patterns
resolver problema que acontece com frequencia
melhorar integração da equipe
levantar os problemas e o que deve fazer e então escolher o design patterns
- Creational / Structural / Behavioral

Singleton: Classe que só pode ser instanciada uma vez | 1 objeto

-- Structural: 
Quando a parte View e Model não se conversam | usando o facade | facade -> um tipo de structural design patters
Facade: interface unica para os subconjuntos se conectarem
- Para uma equipe trabalhar mais facilmente

MVC: Não é um design pattern

-- Behavioral: Padrões menos comuns
Observer: Usando mais com threads
Strategy: Classe para encapsular um algoritmo que resolve um mesmo problema














