------------------------------------------------------------------------------------------------------------------------
*** Aula 01 - 30/11/2018 - Sexta-feira

Professor: Alexandre Zanatta Vieira
Turma: 10923

Instalar bracketeer / EGit / windowbuilder

< > = Operador diamante

for (Integer i : lista) { //for iterator

Box e Unbox -> Java faz automaticamente : auto-boxing e auto-unboxing

Há linguagens que o box e unbox dos tipos primitivos não é feito automaticamente

Classe wrapper

LinkedList x ArrayList - Questão de velocidade
Linked -> Mais para consulta - ao inserir demora mais, pois salva em lugares especificos
Array -> Mais para inserção - salva em qualquer lugar da memoria, por isso salva mais rapido

.clear() -> limpar memória

First Child / Last Child

Collections.sort(a); x Arrays.sort(a);

Hash -> Nâo repete elementos

Mapas -> Listas com chave e valor

------------------------------------------------------------------------------------------------------------------------
*** Estudo 02/12/2018

-- https://dzone.com/articles/arraylist-vs-linkedlist-vs
Aparentemente � ao contr�rio do que foi visto em aula, Linked � melhor em adicionar elementos e Array para get

-- XML:
https://xmlwriter.net/xml_guide/xml_declaration.shtml
https://docs.microsoft.com/pt-br/previous-versions/ms256048(v=vs.110)
https://www.w3schools.com/xml/xml_dtd_intro.asp
http://www.c4learn.com/xml/xml-documents-structure/
https://spin.atomicobject.com/2010/09/01/working-with-embedded-cdata-in-xml-documents/
http://www.tizag.com/xmlTutorial/xmlprolog.php

------------------------------------------------------------------------------------------------------------------------
*** Aula 02 - 03/12/2018 - Segunda-feira

-- Revisão Java Básico

-- Herança x Polimorfismo

Coerção (Type cast): Mudança de um tipo de variável para outro Ex.: float to int
Promoção: Elevar o tipo de variável, não precisa do cast. Ex.: int to float

- Boxing e Unboxing
int (tipo primitivo) -> Integer (classe empacotadora)
Integer i = new Integer(10) -> Boxing da classe primitiva
int b = i,getInt() -> Unboxing
Integer i =10 -> Auto boxing

- Herança
superclasse (classe pai) / subclasse (classe filho)
super.metodo()
extends -> herança declarada
Java não permite herança multiplas
super() -> para acessar a classe pai com this - usar no construtor

memórias: heap /stack
https://pt.stackoverflow.com/questions/3797/o-que-s%C3%A3o-e-onde-est%C3%A3o-o-stack-e-heap

linguagem progress

private e ecapsulamente serve para proteger o programador dele mesmo
private x protected

- Classes abstratas

-- Tarefa de casa: Classe abstrata Mensagem / Classe Filha MensagemVoz / Classe Filha MensagemTexto / Classe Filha MensagemVideo
- Instanciar 3 objetos / Quando chamar o envia objeto mostrar a mensagem correspondente
- 4 classes
1 classe abstrata
1 metodo generico envia mensagem
classes filhas implementar o metodo envia mensagem
Emissor, destinatario, titulo

metodo concreto x metodo abstrato

------------------------------------------------------------------------------------------------------------------------
*** Aula 03 - 04/12/2018 - Terça-feira

Openstack
eof -> end of file
MVC: Model / View / COntrol
MVVM: Padrão android

facade: Mascara a entrada de dados para o model ou a existencia do banco para a view

-- Design Patterns
resolver problema que acontece com frequencia
melhorar integração da equipe
levantar os problemas e o que deve fazer e então escolher o design patterns
- Creational / Structural / Behavioral

Singleton: Classe que só pode ser instanciada uma vez | 1 objeto

-- Structural: 
Quando a parte View e Model não se conversam | usando o facade | facade -> um tipo de structural design patters
Facade: interface unica para os subconjuntos se conectarem
- Para uma equipe trabalhar mais facilmente

MVC: Não é um design pattern

-- Behavioral: Padrões menos comuns
Observer: Usando mais com threads
Strategy: Classe para encapsular um algoritmo que resolve um mesmo problema


------------------------------------------------------------------------------------------------------------------------
*** Aula 04 - 05/12/2018 - Quarta-feira

HashMap //Rapido para inserção
LinkedHashMap //Rapido leitura

https://stackoverflow.com/questions/8689725/map-entry-how-to-use-it

-- Tarefa casa
- Ao clicar na barra de ferramentas abrir uma janela dentro do form principar (JinternalFrame)
Formulario de cadastro de cliente
Upload de arquivo
Messenger

------------------------------------------------------------------------------------------------------------------------
*** Aula 05 - 06/12/2018 - Quinta-feira

-- JDBC - API de acesso a banco de dados
https://www.devmedia.com.br/jdbc-tutorial/6638

-- Banco de dados

Pacote: java.sql.*

- Drivers de acesso
Dois tipos de drive
JDBC-ODBC / JDBC Puro

https://www.devmedia.com.br/algebra-relacional-parte-i/2663
Linguagem relacional x orientada a objeto

Tupla: http://excript.com/python/tuplas-python.html
https://stackoverflow.com/questions/2670982/using-pairs-or-2-tuples-in-java

https://www.liquidweb.com/kb/mysql-performance-myisam-vs-innodb/
engine mysql innodb

MySQL Workbench

create database aula;

use aula;

create table cliente(
	cd_cliente serial primary key,
    nm_cliente varchar(50) not null,
    cpf varchar(14) not null unique,
    dt_nascimento date,
    nro_teste numeric(4,2),
    endereco text
);

INSERT INTO cliente VALUES(1,'NOME TESTE','065.888.999-37',20001207,10.5,'TESTE TESTE TESTE TESTE TESTE TESTE');

INSERT INTO cliente (nm_cliente,cpf,dt_nascimento,nro_teste,endereco)
VALUES ('NOME DOIS TESTE','555.888.777-37',19880509,2.8,'Rua A');

INSERT INTO cliente (nm_cliente,cpf,dt_nascimento,nro_teste,endereco)
VALUES ('NOME TESTE TRES','111.111.111-11',19501230,5.1,'Rua B');

INSERT INTO cliente (nm_cliente,cpf,dt_nascimento,nro_teste,endereco)
VALUES ('NOME TESTE 4','888.888.888-88',19630118,5.1,'Rua C');

INSERT INTO cliente (nm_cliente,cpf,dt_nascimento,nro_teste,endereco)
VALUES ('NOME TESTE 4','747.747.747-74',19630118,5.1,'Rua C'), ('NOME TESTE TRES','545.545.545-55',19501230,5.1,'Rua B');

sql wildcard
https://www.w3schools.com/sql/sql_wildcards.asp

safe mysql
https://www.mkyong.com/mysql/cant-delete-records-in-mysql-workbench/

Exercicio homework: Criar uma nova tabela: departamento
Chave, nome, tipo departamento

------------------------------------------------------------------------------------------------------------------------
*** Aula 07 - 06/12/2018 - Sexta-feira
Conexões com banco de dados.

https://www.devmedia.com.br/criando-uma-conexao-java-mysql-server/16753

------------------------------------------------------------------------------------------------------------------------
*** Aula 08-JII - 10/12/2018 - Segunda-feira

Janelas com orquestrador.

DAO: Data Access Object | Classe que faz a conexão com o banco de dados
- só para afzer o insert/update/select
- para validações, como validar cpf, não é utilizado o dao

JavaBean (POJO): Classes feitas para armazenar dados | gets/sets

POJO implements Serializable
- atributos privados
- contrutor
- todos hetters e setters - publicos

modificador "interface"
- Se eu tenho um bean Pessoa logo interface -> PessoaDAO
- contém os métodos de PessoaDAOImpl
- para trabalhar com o banco de dados - acesso da interface

class PessoaDAOImpl implements PessoaDAO
- 

Pacotes divididos:
DAO:
- Classe CLienteDAO
TO - transfer object
- Classe CLiente - bean de cliente
ConnectorFactory
- Classe ConnectionFactory

Apresentação do objeto?

ConnectorFactory

/aula, "root", "elaborata"

------------------------------------------------------------------------------------------------------------------------
*** Aula 09-JII - 11/12/2018 - Terça-feira
Aula adiada.

------------------------------------------------------------------------------------------------------------------------
*** Aula 09-JII - 12/12/2018 - Quarta-feira
Novo professor: José Augusto Martins Nieviadonski

- Google Drive
Instalar SQuirrel - Cliente SQL
db-derby -> Banco de dados
monospaced Arial

Sequencia conteudo da apostila: (planejamento dos capítulos)
MVC / 13 / 14 / Interface / 4 / 7 / 8 9 10 / 6 / 5 / 1 / 2 / 3 / 11 / 12 

- MVC = Model/View/Controller
Conceito/padrão indepente de linguagem
Separar as funcionalidades do código

VIEW -> CONTROLLER -> MODEL
https://commons.wikimedia.org/wiki/File:MVC_Diagram_(Model-View-Controller).svg

 --- BUSINESS TIER ---  | ----- INFRA TIER ------
-- CAMADA DO SISTEMA -- | --CAMADA INFRAESTRUTURA--
VIEW ------ CONTROLLER  |
  \            /		|
   \          /			|    DAO - Data Access Object
    \        /			|         (Como)
      MODEL				|    Autenticação/Autorização (LDAP)

Model: Objetos do sistema - Dados que o sistema manipula | Java -> Classes

View.: Interface de comunicação do sistema com o mundo exterior não necessáriamente com o usuário - com um sistema externo - 
- Exemplos: Tela Swing | Páginas HTML | Importação/Exportação de Dados | Web Services | Comunicação TCP/IP (Sockets, SMTP/MAIL, FTP)
- JSP / JSF

Controller: Processos do sistema. -> 80% da complexidade do sistema
- Regras de negócio

Exercício: Sistema de Agenda e Contato
** Contato
- Id
- Telefone - Valor Único
- Nome Cmpleto
- Email
- Endereço
** Agenda
- Id
- Data
- Hora Início
- Duração
- Evento


this. x qualificação categorias (colocar p em parametros em code style)


renomear variaves em cascata

------------------------------------------------------------------------------------------------------------------------
*** Aula 10-JII - 13/12/2018 - Quinta-feira

Code Conventions
Padrão de qualificação  | Code Style

Model é dados que o sistema manipula - geralmente ligados a tabelas do sistema.

Interface java.util.Comparable -> ordenação

Serializable - ficar em socket

alt+shift+r = renomear em vários lugares

Extract Method -> Transformar trexo de código em um metodo

Window -> Show View -> Outline = Organizar e visualizar metodos

------------------------------------------------------------------------------------------------------------------------
*** Aula 11-JII - 14/12/2018 - Sexta-feira

Rever / Levntar

Esquema de validação

tipos primitivos e wrappers

------------------------------------------------------------------------------------------------------------------------
*** Aula 12-JII - 17/12/2018 - Segunda-feira

CRUDSC
[C] Create - incluir o registro na base de dados
[R] Recovery/READ - Recuperar UM registro - Chave primária
[U] Update - Atualizar as informações existentes
[D] Delete - Remover o registro existente
[S] Search - Pesquisar a base de dados usando um ou MAIS critérios obtendo registroS
[C] Count - Retorna a quantidade com um ou mais critérios

CERAPX
[C] - CRIAR
[E] - Excluir
[R] - Recuperar
[A] - Atualizar
[P] - Pesquisar
[C] - Contar

Quem implementa o CRUD é o DAO.
DAO - Data Access Object -> Realiza a persistência e instanciação do Model.
	Implementa o como fazer a persistencia e instanciação

Persistência: COlocar os dados do objeto em uma base de dados | Persistir: Os dados é desligar a máquina e os dados continuarem.
Instanciação: Criar um objeto usando os dados da base de dados

Padrão de Projeto / Design Patterns: Soluções aprovadas para determinado
Livro de design patterns

-- Manipulação de arquivos: Java I/O (JAVA I/O não é só arquivos - lê/grava dados em STREAMS)
* 3 camadas:
-Funcionalidade Básica
-Meio Físico
-Operações lógicas

Operações sobre arquivos: Criar / Remover / Renomear / Mover
Operações sobre os dados: Abrir, Inserir, Atualizar, Remover, Ler, Fechar

- 4 classes fundamentais: (Operações sobre os dados) - Camada Primária com funcionalidades básicas
Arquivos Binários: InputStream / OutputStream (Leitura / Gravação)
Arquivos Texto: Reader / Writer (Leitura / Gravação)

Padrão decorator
Na criação da terceira camada usar o objeto da segunda camada // decorar -> FileWriter + BufferedWriter

Build Path -> Vincular dois projetos

{
//Codigo de inicialização do objeto
// é executado antes de qualquer construtor
}

static {
//código de inicialização estático
//será executado somente uma vez quando o arquivo .class é carregado na máquina virtual
}













